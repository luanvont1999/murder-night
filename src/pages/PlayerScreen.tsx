// src/components/PlayerScreen.tsx
import React, { useState, useEffect, useMemo } from "react"
import { useParams } from "react-router-dom"
import { db } from "@/services/firebase-config"
import {
  doc,
  collection,
  getDocs,
  onSnapshot,
  updateDoc,
} from "firebase/firestore"

import LocationTab from "@/components/tabs/LocationTab"

// Import c√°c icon (n·∫øu b·∫°n d√πng th∆∞ vi·ªán nh∆∞ 'react-icons')
// import { FaUser, FaSearch, FaMapMarkerAlt } from 'react-icons/fa';

// import "./PlayerScreen.css"

const PlayerScreen: React.FC = () => {
  const roomId = useMemo(
    () => localStorage.getItem("roomId"),
    []
  )
  
  const characterId = useMemo(
    () => localStorage.getItem("characterId"),
    []
  )

  // L·∫•y ID ng∆∞·ªùi ch∆°i ·∫©n danh t·ª´ localStorage
  const anonymousPlayerId = useMemo(
    () => localStorage.getItem("anonymousPlayerId"),
    []
  )

  // State d·ªØ li·ªáu
  const [roomData, setRoomData] = useState<GameRoom | null>(null)
  const [allClues, setAllClues] = useState<ClueTemplate[]>([])
  const [allLocations, setAllLocations] = useState<LocationTemplate[]>([])

  // State giao di·ªán
  const [isLoading, setIsLoading] = useState<boolean>(true)
  const [error, setError] = useState<string | null>(null)
  const [activeTab, setActiveTab] = useState<string>("character") // M·∫∑c ƒë·ªãnh l√† tab Nh√¢n v·∫≠t

  // --- LOGIC L·∫§Y D·ªÆ LI·ªÜU (Gi·ªØ nguy√™n nh∆∞ phi√™n b·∫£n tr∆∞·ªõc) ---
  useEffect(() => {
    if (!roomId) {
      setError("Kh√¥ng t√¨m th·∫•y ID ph√≤ng.")
      setIsLoading(false)
      return
    }

    const roomDocRef = doc(db, "gameRooms", roomId)
    const unsubscribe = onSnapshot(
      roomDocRef,
      async (docSnap) => {
        if (docSnap.exists()) {
          setRoomData(docSnap.data() as GameRoom)
          if (allClues.length === 0) {
            try {
              const cluesColRef = collection(
                db,
                "gameRooms",
                roomId,
                "roomClues"
              )
              const locationsColRef = collection(
                db,
                "gameRooms",
                roomId,
                "roomLocations"
              )
              const [cluesSnapshot, locationsSnapshot] = await Promise.all([
                getDocs(cluesColRef),
                getDocs(locationsColRef),
              ])
              setAllClues(
                cluesSnapshot.docs.map(
                  (d) => ({ id: d.id, ...d.data() } as ClueTemplate)
                )
              )
              setAllLocations(
                locationsSnapshot.docs.map(
                  (d) => ({ id: d.id, ...d.data() } as LocationTemplate)
                )
              )
            } catch (subError: any) {
              setError(
                `L·ªói khi t·∫£i d·ªØ li·ªáu chi ti·∫øt c·ªßa ph√≤ng: ${subError.message}`
              )
            }
          }
        } else {
          setError(`Ph√≤ng game v·ªõi ID "${roomId}" kh√¥ng t·ªìn t·∫°i.`)
        }
        setIsLoading(false)
      },
      (err) => {
        setError(`Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn ph√≤ng game. L·ªói: ${err.message}`)
        setIsLoading(false)
      }
    )
    return () => unsubscribe()
  }, [roomId, allClues.length])

  // --- D·ªÆ LI·ªÜU D·∫™N XU·∫§T (Gi·ªØ nguy√™n) ---
  const playerInstance = useMemo((): Player | null => {
    if (!anonymousPlayerId || !roomData?.players) return null
    return (
      roomData.players.find((p) => p.playerId === anonymousPlayerId) || null
    )
  }, [roomData?.players, anonymousPlayerId])

  const playerCharacter = useMemo((): CharacterTemplate | null => {
    return roomData?.characters.find((c) => c.id === characterId) || null
  }, [roomData?.characters, characterId])

  const knownClues = useMemo((): ClueTemplate[] => {
    if (!playerInstance || !allClues.length) return []
    const inventoryIds = new Set(playerInstance.inventory || [])
    return allClues.filter(
      (clue) =>
        inventoryIds.has(clue.id) ||
        (roomData?.publicClues || []).includes(clue.id)
    )
  }, [allClues, playerInstance, roomData?.publicClues])

  const knownClueIdSet = useMemo((): Set<string> => {
    if (!playerInstance) return new Set()
    // G·ªôp manh m·ªëi trong t√∫i ƒë·ªì v√† manh m·ªëi c√¥ng khai
    const allKnownIds = [
      ...(playerInstance.inventory || []),
      ...(roomData?.publicClues || []),
    ]
    return new Set(allKnownIds)
  }, [playerInstance, roomData?.publicClues])

  const handleDiscoverClue = async (clueIdToDiscover: string) => {
    if (!roomId || !playerInstance) return

    // Ki·ªÉm tra ƒë·ªÉ kh√¥ng th√™m manh m·ªëi ƒë√£ c√≥
    if (playerInstance.inventory.includes(clueIdToDiscover)) {
      console.log("Clue already in inventory.")
      return
    }

    console.log(
      `Player ${playerInstance.displayName} is discovering clue: ${clueIdToDiscover}`
    )

    try {
      const roomDocRef = doc(db, "gameRooms", roomId)

      // T·∫°o m·ªôt b·∫£n sao c·ªßa m·∫£ng players hi·ªán t·∫°i
      const updatedPlayers = roomData?.players.map((player) => {
        // N·∫øu t√¨m th·∫•y ƒë√∫ng ng∆∞·ªùi ch∆°i hi·ªán t·∫°i
        if (player.playerId === playerInstance.playerId) {
          // Tr·∫£ v·ªÅ m·ªôt object m·ªõi v·ªõi inventory ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
          return {
            ...player,
            inventory: [...player.inventory, clueIdToDiscover],
          }
        }
        // N·∫øu kh√¥ng, tr·∫£ v·ªÅ player object kh√¥ng thay ƒë·ªïi
        return player
      })

      // C·∫≠p nh·∫≠t to√†n b·ªô m·∫£ng players tr√™n Firestore
      await updateDoc(roomDocRef, {
        players: updatedPlayers,
      })
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t inventory:", error)
      alert("Kh√¥ng th·ªÉ kh√°m ph√° manh m·ªëi. Vui l√≤ng th·ª≠ l·∫°i.")
    }
  }

  // --- X·ª¨ L√ù TR·∫†NG TH√ÅI LOADING/ERROR (Gi·ªØ nguy√™n) ---
  if (isLoading) {
    return <div className="screen-loading-player">ƒêang t·∫£i d·ªØ li·ªáu...</div>
  }
  if (error) {
    return (
      <div className="player-screen-error screen">
        <h2>L·ªói</h2>
        <p>{error}</p>
      </div>
    )
  }
  if (!playerInstance || !playerCharacter) {
    return (
      <div className="player-screen-error screen">
        <h2>L·ªói</h2>
        <p>Kh√¥ng th·ªÉ x√°c th·ª±c th√¥ng tin ng∆∞·ªùi ch∆°i ho·∫∑c nh√¢n v·∫≠t.</p>
      </div>
    )
  }

  // --- C·∫§U TR√öC GIAO DI·ªÜN DI ƒê·ªòNG (JSX) ---
  return (
    <div className="player-screen-wrapper">
      <div className="mobile-screen-container">
        {/* Header c·ªßa m√†n h√¨nh ƒëi·ªán tho·∫°i */}
        <header className="screen-header">
          <div className="header-info">
            <span className="room-id">Ph√≤ng: {roomId}</span>
            <span className="character-name">Vai: {playerCharacter.name}</span>
          </div>
        </header>

        {/* Th√¢n m√†n h√¨nh, ch·ª©a n·ªôi dung c√≥ th·ªÉ cu·ªôn */}
        <main className="screen-body">
          {activeTab === "character" && (
            <div className="tab-pane">
              <h2 className="tab-title">Th√¥ng tin Nh√¢n v·∫≠t</h2>
              <div className="info-card">
                <h3>{playerCharacter.name}</h3>
                <p>
                  <strong>Tu·ªïi:</strong> {playerCharacter.age}
                </p>
                <p>
                  <strong>V·ªã tr√≠:</strong> {playerCharacter.position}
                </p>
              </div>
              <div className="info-card">
                <h4>
                  M·ª•c ti√™u "L∆∞∆°ng thi·ªán": {playerCharacter.goals.good_path.name}
                </h4>
                <ul>
                  {playerCharacter.goals.good_path.completion_conditions.map(
                    (cond, i) => (
                      <li key={`good-${i}`}>{cond}</li>
                    )
                  )}
                </ul>
              </div>
              <div className="info-card">
                <h4>
                  M·ª•c ti√™u "Ph·∫£n b·ªôi": {playerCharacter.goals.evil_path.name}
                </h4>
                <ul>
                  {playerCharacter.goals.evil_path.completion_conditions.map(
                    (cond, i) => (
                      <li key={`evil-${i}`}>{cond}</li>
                    )
                  )}
                </ul>
              </div>
            </div>
          )}

          {activeTab === "clues" && (
            <div className="tab-pane">
              <h2 className="tab-title">Manh M·ªëi ({knownClues.length})</h2>
              {knownClues.length > 0 ? (
                knownClues.map((clue) => (
                  <div key={clue.id} className="clue-card">
                    <strong>{clue.name}</strong>
                    <p>{clue.content}</p>
                  </div>
                ))
              ) : (
                <p className="empty-state">B·∫°n ch∆∞a c√≥ manh m·ªëi n√†o.</p>
              )}
            </div>
          )}

          {activeTab === "locations" && (
            <LocationTab
              locations={allLocations}
              knownClueIds={knownClueIdSet}
              onDiscoverClue={handleDiscoverClue}
            />
          )}
        </main>

        {/* Thanh ƒëi·ªÅu h∆∞·ªõng d∆∞·ªõi ƒë√°y m√†n h√¨nh */}
        <nav className="screen-navigation">
          <button
            className={`nav-button ${
              activeTab === "character" ? "active" : ""
            }`}
            onClick={() => setActiveTab("character")}
          >
            {/* <FaUser /> */}
            <span>üë§</span>
            <small>Nh√¢n v·∫≠t</small>
          </button>
          <button
            className={`nav-button ${activeTab === "clues" ? "active" : ""}`}
            onClick={() => setActiveTab("clues")}
          >
            {/* <FaSearch /> */}
            <span>üîç</span>
            <small>Manh m·ªëi</small>
          </button>
          <button
            className={`nav-button ${
              activeTab === "locations" ? "active" : ""
            }`}
            onClick={() => setActiveTab("locations")}
          >
            {/* <FaMapMarkerAlt /> */}
            <span>üìç</span>
            <small>ƒê·ªãa ƒëi·ªÉm</small>
          </button>
        </nav>
      </div>
    </div>
  )
}

export default PlayerScreen
