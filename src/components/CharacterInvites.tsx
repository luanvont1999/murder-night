// src/components/CharacterInvites.tsx
import React from "react";
import { QRCodeSVG } from "qrcode.react";
// import "../css/CharacterInvites.css"; // Gi·∫£ s·ª≠ b·∫°n ƒë√£ c√≥ file CSS n√†y

interface CharacterInvitesProps {
  roomId: string;
  characters: CharacterTemplate[];
  baseUrl?: string;
}

const CharacterInvites: React.FC<CharacterInvitesProps> = ({
  roomId,
  characters,
  baseUrl = window.location.origin,
}) => {
  if (!roomId || !characters || characters.length === 0) {
    return (
      <div className="character-invites-container">
        <p className="invite-instructions">
          Kh√¥ng th·ªÉ t·∫°o l·ªùi m·ªùi. Thi·∫øu th√¥ng tin ph√≤ng ho·∫∑c nh√¢n v·∫≠t.
        </p>
      </div>
    );
  }

  const handleCopyToClipboard = (textToCopy: string, characterName: string) => {
    navigator.clipboard
      .writeText(textToCopy)
      .then(() => {
        alert(`ƒê√£ sao ch√©p link m·ªùi cho nh√¢n v·∫≠t ${characterName} v√†o clipboard!`);
      })
      .catch(() => {
        alert("L·ªói khi sao ch√©p. Vui l√≤ng sao ch√©p th·ªß c√¥ng.");
      });
  };

  return (
    <div className="character-invites-container">
      <h4>
        <span role="img" aria-label="invitation">üíå</span> 
        M·ªùi ng∆∞·ªùi ch∆°i tham gia
      </h4>
      <p className="invite-instructions">
        S·ª≠ d·ª•ng link ho·∫∑c m√£ QR d∆∞·ªõi ƒë√¢y ƒë·ªÉ m·ªùi b·∫°n b√® v√†o vai c√°c nh√¢n v·∫≠t.
      </p>
      <div className="invites-grid">
        {(characters as CharacterTemplate[]).map((character) => {
          // S·ª≠ d·ª•ng `character.id` (ho·∫∑c `character.name` l√†m fallback) l√†m Character ID trong URL
          const characterIdForUrl = character.id || character.name;
          const joinUrl = `${baseUrl}/join-room?roomId=${roomId}&characterId=${characterIdForUrl}`;

          return (
            <div key={characterIdForUrl} className="character-invite-card">
              <h5>{character.name}</h5>
              {character.position && (
                <p className="character-role-invite">({character.position})</p>
              )}
              <div className="qr-code-container">
                <QRCodeSVG
                  value={joinUrl}
                  size={140}
                  level="H"
                  includeMargin={true}
                />
              </div>
              <div className="join-url-actions">
                <input
                  type="text"
                  value={joinUrl}
                  readOnly
                  className="join-url-input"
                  aria-label={`Link m·ªùi cho ${character.name}`}
                  onClick={(e) => (e.target as HTMLInputElement).select()}
                />
                <button
                  onClick={() => handleCopyToClipboard(joinUrl, character.name)}
                  className="button-small copy-link-button"
                  title={`Sao ch√©p link m·ªùi cho ${character.name}`}
                >
                  <span role="img" aria-label="copy">üìã</span> Sao ch√©p
                </button>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default CharacterInvites;